#!/bin/bash

# SPDX-FileCopyrightText: 2023 - 2023 ENCRYPTED SUPPORT LP <adrelanos@kicksecure.com>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

# This script creates a live-boot ISO image.

# TODO: Consider porting to squashfs-tools-ng for potential improvements in speed and size reduction.

# Enable debugging, exit on error, and fail on pipe errors.
set -x
set -e
set -o pipefail

if [ ! "$(id -u)" = "0" ]; then
   true "ERROR: Must be run with root privileges (sudo)! sudo $0" >&2
   exit 1
fi

# Ensure necessary commands are available.
command -v mksquashfs >/dev/null
command -v grub-mkrescue >/dev/null
command -v xorriso >/dev/null

# Install undocumented dependencies for grub-mkrescue.
apt install --no-install-recommends grub-efi-amd64-bin grub-efi-amd64-signed mtools

# Define file paths for the image, temporary ISO directory, and the output ISO file.
IMAGE_FILE="/home/$SUDO_USER/grml-debootstraptestbin/test.img"
ISO_TMP_DIR="/home/$SUDO_USER/grml-debootstraptestbin/iso_tmp"
ISO_IMAGE_FILE="/home/$SUDO_USER/grml-debootstraptestbin/output.iso"

# Mount the image file and set up loopback device.
true "Mounting..."
DEVINFO=$(kpartx -asv "$IMAGE_FILE")
if [ -z "${DEVINFO}" ] ; then
    echo "Error setting up loopback device." >&2
    exit 1
fi

# Extract and prepare loopback device information.
LOOP_PART="${DEVINFO##add map }"
LOOP_PART="${LOOP_PART// */}"
EFI_TARGET="/dev/mapper/$LOOP_PART"
LOOP_PART="${LOOP_PART%p1}p3"
TARGET="/dev/mapper/$LOOP_PART"
MNTPOINT=$(mktemp -d)

# Mount the target file system and EFI partition.
mount "$TARGET" "$MNTPOINT"
mount "$EFI_TARGET" "${MNTPOINT}"/boot/efi

# Clear and create necessary directories in the temporary ISO directory.
rm -r -f "$ISO_TMP_DIR"
mkdir --parents "${ISO_TMP_DIR}/LiveOS"
mkdir --parents "${ISO_TMP_DIR}/boot/grub"

# Retrieve the kernel version from the mounted image.
KVERSION=$(cd "$MNTPOINT"/boot && find vmlinuz-* | tail -1 | sed 's@vmlinuz-@@')

# Define paths for the kernel file and initial ramdisk.
kernel_file="/boot/vmlinuz-${KVERSION}"
initial_ramdisk_file="/boot/initrd.img-${KVERSION}"

true "Creating squashfs..."
## Take the contents of the VM image and create the squashfs.img file in the LiveOS folder
## within the temporary ISO directory.
##
## The /LiveOS/squashfs.img path is a default setting used by dracut.
##
## During development, especially when testing various kernel boot parameters, it may be
## unnecessary to repeatedly recreate the squashfs file.
mksquashfs "${MNTPOINT}" "${ISO_TMP_DIR}/LiveOS/squashfs.img" -noappend

# Copy kernel and initial ramdisk to the temporary ISO directory.
cp -a "${MNTPOINT}${kernel_file}" "${ISO_TMP_DIR}/LiveOS/vmlinuz"
cp -a "${MNTPOINT}${initial_ramdisk_file}" "${ISO_TMP_DIR}/LiveOS/initrd.img"

# Unmount partitions and clean up loopback device.
true "Unmounting..."
umount "${MNTPOINT}"/boot/efi
umount "${MNTPOINT}"
kpartx -d "${TARGET}"
rmdir "${MNTPOINT}"

# Prepare the ISO file by creating a GRUB configuration file.
true "Preparing ISO..."
cat << EOF > "${ISO_TMP_DIR}/boot/grub/grub.cfg"
set default="0"
set timeout=10
menuentry "Linux" {
    linux /LiveOS/vmlinuz root=live:CDLABEL=test rd.live.image rd.debug rd.live.debug rd.live.overlay.overlayfs=1 console=ttyS0
    initrd /LiveOS/initrd.img
}
EOF

# Create the ISO using grub-mkrescue based on the temporary ISO directory.
#
# '-V test' set label to 'test'. This must match the 'root=live:CDLABEL=test' kernel command line.
true "Creating ISO..."
grub-mkrescue --verbose -V test -o "$ISO_IMAGE_FILE" "$ISO_TMP_DIR"

# Cleanup temporary files (uncomment to enable).
#rm -r "$ISO_TMP_DIR"

true "Done."
