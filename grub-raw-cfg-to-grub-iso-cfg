#!/usr/bin/python3 -u

# SPDX-FileCopyrightText: 2023 - 2023 ENCRYPTED SUPPORT LP <adrelanos@kicksecure.com>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

# TODO: remove
### BEGIN /etc/grub.d/10_linux_live ###
### END /etc/grub.d/10_linux_live ###

import sys

def process_grub_line(input_line, extra_params):
    leading_whitespace = input_line[:len(input_line) - len(input_line.lstrip())]
    comment = ""
    if 'search --no-floppy --fs-uuid --set=root' in input_line:
        return None  # Skip the line

    line_starts = ('linux', 'module2')
    for line_start in line_starts:
        if input_line.lstrip().startswith(line_start):
            parts = input_line.split(line_start)
            pre_command_whitespace = parts[0]
            post_command_whitespace = parts[1][:len(parts[1]) - len(parts[1].lstrip())]

            remaining_parts = parts[1].lstrip().split()
            excluded_startswith = ['root=UUID']
            excluded_exact = ['ro', 'quiet', 'rhgb']

            filtered_parts = []
            removed_parts = []
            for part in remaining_parts:
                if any(part.startswith(excluded) for excluded in excluded_startswith) or part in excluded_exact:
                    removed_parts.append(part)
                else:
                    filtered_parts.append(part)

            if removed_parts:
                comment = leading_whitespace + "# Removed options: " + ' '.join(removed_parts) + '\n'

            remaining_parts = filtered_parts
            processed_line = comment + pre_command_whitespace + line_start + post_command_whitespace + ' '.join(remaining_parts) + ' ' + ' '.join(extra_params) + '\n'

            return processed_line

    return input_line  # Return the line unmodified if it doesn't need processing

def process_grub_config(input_file, output_file, extra_params):
    try:
        with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
            for line in infile:
                processed_line = process_grub_line(line, extra_params)
                if processed_line is not None:
                    outfile.write(processed_line)
    except IOError as e:
        print(f"Error: {e}")

def main():
    if len(sys.argv) < 4:
        print("Usage: grub-raw-cfg-to-grub-iso-cfg <input_grub.cfg> <output_grub-iso.cfg> <extra_param1> [<extra_param2> ...]")
        sys.exit(1)

    input_grub_file = sys.argv[1]
    output_grub_file = sys.argv[2]
    extra_kernel_params = sys.argv[3:]

    process_grub_config(input_grub_file, output_grub_file, extra_kernel_params)

if __name__ == "__main__":
    main()
