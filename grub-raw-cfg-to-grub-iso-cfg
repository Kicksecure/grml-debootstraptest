#!/usr/bin/python3 -u

# SPDX-FileCopyrightText: 2023 - 2023 ENCRYPTED SUPPORT LP <adrelanos@kicksecure.com>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

import sys

def process_grub_line(input_line, extra_params):
    if 'search --no-floppy --fs-uuid --set=root' in input_line:
        return None  # Skip the line

    if input_line.lstrip().startswith('linux'):
        # Preserve the original whitespace before 'linux' and between 'linux' and the rest of the line
        parts = input_line.split('linux')
        pre_linux_whitespace = parts[0]
        post_linux_whitespace = parts[1][:len(parts[1]) - len(parts[1].lstrip())]

        # Remove root=UUID, 'ro', 'quiet' and append extra kernel parameters
        remaining_parts = parts[1].lstrip().split()
        remaining_parts = [part for part in remaining_parts if not part.startswith('root=UUID') and part != 'ro' and part != 'quiet']
        processed_line = pre_linux_whitespace + 'linux' + post_linux_whitespace + ' '.join(remaining_parts) + ' ' + ' '.join(extra_params) + '\n'

        return processed_line

    return input_line  # Return the line unmodified if it doesn't need processing

def process_grub_config(input_file, output_file, extra_params):
    try:
        with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
            for line in infile:
                processed_line = process_grub_line(line, extra_params)
                if processed_line is not None:
                    outfile.write(processed_line)
    except IOError as e:
        print(f"Error: {e}")

def main():
    if len(sys.argv) < 4:
        print("Usage: grub-raw-cfg-to-grub-iso-cfg <input_grub.cfg> <output_grub-iso.cfg> <extra_param1> [<extra_param2> ...]")
        sys.exit(1)

    input_grub_file = sys.argv[1]
    output_grub_file = sys.argv[2]
    extra_kernel_params = sys.argv[3:]

    process_grub_config(input_grub_file, output_grub_file, extra_kernel_params)

if __name__ == "__main__":
    main()
